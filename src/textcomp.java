import org.jdesktop.beansbinding.Property;
import java.awt.Color;
import java.awt.Dialog;
import java.awt.Event;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.Reader;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING;
import static java.nio.file.StandardOpenOption.WRITE;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Caret;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.Document;
import javax.swing.text.EditorKit;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.text.StyledEditorKit;
import javax.swing.text.StyledEditorKit.BoldAction;
import javax.swing.text.StyledEditorKit.ItalicAction;
import javax.swing.text.StyledEditorKit.UnderlineAction;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.rtf.RTFEditorKit;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ok
 */
public class textcomp extends javax.swing.JFrame {
String title;
    File file;
 BufferedWriter e;
 JFileChooser chooser = new JFileChooser();
AttributeSet sat;

/**
     * Creates new form textcomp
     */ 

 UndoManager un = new UndoManager();
undoable ur = new undoable();
static Color[] colors = {Color.black,Color.BLUE, Color.GRAY, Color.RED,Color.GREEN,Color.DARK_GRAY,Color.ORANGE,Color.pink,Color.yellow};
static String[] strings = {"BLACK","BLUE", "GRAY","RED","GREEN","Dark Grey","Orange ","pink","yellow"};
    public textcomp() {

        initComponents();
FindDialog.setLocationRelativeTo( new JFrame());
chooser.addChoosableFileFilter(new html());

ComboBoxRenderer render = new ComboBoxRenderer(colorcombo);
render.setColors(colors);
render.setStrings(strings);


colorcombo.setRenderer(render);
colorcombo.addPopupMenuListener(new BoundsPopupMenuListener(true,false));
    
    
   
    
    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jMenuItem1 = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        FindDialog = new javax.swing.JDialog();
        jTextField1 = new javax.swing.JTextField();
        FindButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        caseMatch = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        UpButton = new javax.swing.JRadioButton();
        DownButton = new javax.swing.JRadioButton();
        MatchWord = new javax.swing.JCheckBox();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        colordialog = new javax.swing.JDialog();
        button1 = new java.awt.Button();
        button2 = new java.awt.Button();
        button3 = new java.awt.Button();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        combo = new javax.swing.JComboBox();
        Number = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        italic = new javax.swing.JButton();
        underline = new javax.swing.JButton();
        Lalign = new javax.swing.JButton();
        Ralign = new javax.swing.JButton();
        Calign = new javax.swing.JButton();
        colorcombo = new javax.swing.JComboBox(strings);
        jScrollPane3 = new javax.swing.JScrollPane();
        chooser.setAcceptAllFileFilterUsed(false);

        chooser.addChoosableFileFilter(new extdef());

        chooser.addChoosableFileFilter(new bi());
        textArea = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        JMenu = new javax.swing.JMenu();
        NewFileMenu = new javax.swing.JMenuItem();
        OpenItem = new javax.swing.JMenuItem();
        SaveItem = new javax.swing.JMenuItem();
        saveas = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        RecDoc = new javax.swing.JMenu();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem7 = new javax.swing.JMenuItem();
        undomenu = new javax.swing.JMenu();
        UndoMenu = new javax.swing.JMenuItem();
        redoMenue = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem8 = new javax.swing.JMenuItem();
        cutMenu = new javax.swing.JMenuItem();
        pastemenu = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        FindMenu = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem5.setText("jMenuItem5");

        jMenu2.setText("jMenu2");

        jScrollPane2.setViewportView(jTextPane1);

        FindDialog.setTitle("M.H Pad");
        FindDialog.setIconImage(new ImageIcon( getClass().getResource("icon.png")).getImage());
        FindDialog.setResizable(false);
        FindDialog.setSize(new java.awt.Dimension(412, 110));
        FindDialog.addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                FindDialogWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        FindDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                FindDialogWindowClosed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        FindButton.setText("find what");
        FindButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindButtonActionPerformed(evt);
            }
        });

        jButton3.setText("cancel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Find");

        caseMatch.setText("Match Case");
        caseMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caseMatchActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("direction"));

        UpButton.setSelected(true);
        UpButton.setText("up");

        DownButton.setText("down");
        DownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(UpButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DownButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(DownButton)
                .addComponent(UpButton))
        );

        MatchWord.setText("Match Whole Word Only");
        MatchWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MatchWordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FindDialogLayout = new javax.swing.GroupLayout(FindDialog.getContentPane());
        FindDialog.getContentPane().setLayout(FindDialogLayout);
        FindDialogLayout.setHorizontalGroup(
            FindDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FindDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FindDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FindDialogLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(FindDialogLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(FindDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(caseMatch)
                            .addComponent(MatchWord))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FindDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FindButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        FindDialogLayout.setVerticalGroup(
            FindDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FindDialogLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(FindDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FindButton)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(FindDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FindDialogLayout.createSequentialGroup()
                        .addGroup(FindDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(FindDialogLayout.createSequentialGroup()
                        .addComponent(caseMatch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MatchWord)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        buttonGroup2.add(UpButton);
        buttonGroup2.add(DownButton);

        jMenuItem3.setText("jMenuItem3");

        jMenuItem4.setText("jMenuItem4");

        colordialog.setUndecorated(true);

        button1.setBackground(new java.awt.Color(255, 51, 51));
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        button2.setBackground(new java.awt.Color(255, 51, 51));

        button3.setBackground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout colordialogLayout = new javax.swing.GroupLayout(colordialog.getContentPane());
        colordialog.getContentPane().setLayout(colordialogLayout);
        colordialogLayout.setHorizontalGroup(
            colordialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colordialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(colordialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(136, Short.MAX_VALUE))
        );
        colordialogLayout.setVerticalGroup(
            colordialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colordialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(65, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("untitled-M.H Pad");
        setBackground(new java.awt.Color(204, 204, 255));
        setIconImage(new ImageIcon( getClass().getResource("icon.png")).getImage()
        );
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        jLayeredPane1.setBackground(new java.awt.Color(245, 238, 220));
        jLayeredPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLayeredPane1.setMaximumSize(new java.awt.Dimension(100, 32767));
        jLayeredPane1.setOpaque(true);
        jLayeredPane1.setPreferredSize(new java.awt.Dimension(40, 60));

        combo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aharoni", "Andalus", "Angsana New", "AngsanaUPC", "Aparajita", "Arabic Typesetting", "Arial", "Arial Black", "Batang", "BatangChe", "Browallia New", "BrowalliaUPC", "Calibri", "Cambria", "Cambria Math", "Candara", "Comic Sans MS", "Consolas", "Constantia", "Corbel", "Cordia New", "CordiaUPC", "Courier New", "DFKai-SB", "DaunPenh", "David", "Dialog", "DialogInput", "DilleniaUPC", "DokChampa", "Dotum", "DotumChe", "Ebrima", "Estrangelo Edessa", "EucrosiaUPC", "Euphemia", "FangSong", "FrankRuehl", "Franklin Gothic Medium", "FreesiaUPC", "Gabriola", "Gautami", "Georgia", "Gisha", "Gulim", "GulimChe", "Gungsuh", "GungsuhChe", "Impact", "IrisUPC", "Iskoola Pota", "JasmineUPC", "KaiTi", "Kalinga", "Kartika", "Khmer UI", "KodchiangUPC", "Kokila", "Lao UI", "Latha", "Leelawadee", "Levenim MT", "LilyUPC", "Lucida Bright", "Lucida Console", "Lucida Sans", "Lucida Sans Typewriter", "Lucida Sans Unicode", "MS Gothic", "MS Mincho", "MS PGothic", "MS PMincho", "MS UI Gothic", "MV Boli", "Malgun Gothic", "Mangal", "Marlett", "Meiryo", "Meiryo UI", "Microsoft Himalaya", "Microsoft JhengHei", "Microsoft New Tai Lue", "Microsoft PhagsPa", "Microsoft Sans Serif", "Microsoft Tai Le", "Microsoft Uighur", "Microsoft YaHei", "Microsoft Yi Baiti", "MingLiU", "MingLiU-ExtB", "MingLiU_HKSCS", "MingLiU_HKSCS-ExtB", "Miriam", "Miriam Fixed", "Mongolian Baiti", "Monospaced", "MoolBoran", "NSimSun", "Narkisim", "Nyala", "PMingLiU", "PMingLiU-ExtB", "Palatino Linotype", "Plantagenet Cherokee", "Raavi", "Raavi", "Rod", "Sakkal Majalla", "SansSerif", "Segoe Print", "Segoe Script", "Segoe UI", "Segoe UI Light", "Segoe UI Semibold", "Segoe UI Symbol", "Serif", "Serif", "Shonar Bangla", "Shruti", "SimHei", "SimSun", "SimSun-ExtB", "Simplified Arabic", "Simplified Arabic Fixed", "Sylfaen", "Symbol", "Tahoma", "Times New Roman", "Traditional Arabic", "Trebuchet MS", "Tunga", "Utsaah", "Vani", "Verdana", "Vijaya", "Vrinda", "Webdings", " " }));
        combo.setSelectedIndex(6);
        combo.setPreferredSize(new java.awt.Dimension(0, 0));
        combo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboItemStateChanged(evt);
            }
        });
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });

        Number.setEditable(true);
        Number.setModel(new javax.swing.DefaultComboBoxModel(new Integer[] { 8,10,11,12,14,16,18,20,22,24,26,28,36,40,44,52,72,80}));
        Number.setSelectedIndex(2);
        Number.setToolTipText("set font size");
        Number.setPreferredSize(new java.awt.Dimension(500, 20));
        Number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumberActionPerformed(evt);
            }
        });

        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setAction(new  er());
        jButton1.setBackground(new java.awt.Color(255, 51, 51));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setForeground(java.awt.Color.BLACK);
        jButton1.setText("B");
        jButton1.setToolTipText("set your text to bold style");
        jButton1.setAlignmentY(0.0F);
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.setIconTextGap(0);
        jButton1.setMargin(new java.awt.Insets(20, 20, 20, 20));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("font :");

        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.CENTER);
        italic.setAction(new  italicAction());
        italic.setBackground(new java.awt.Color(255, 0, 51));
        italic.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        italic.setForeground(java.awt.Color.BLACK);
        italic.setText("I");
        italic.setToolTipText("set your text to italic style ");
        italic.setAlignmentY(0.0F);
        italic.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        italic.setIconTextGap(0);
        italic.setMargin(new java.awt.Insets(0, 0, 0, 0));
        italic.setPreferredSize(new java.awt.Dimension(13, 27));
        italic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                italicActionPerformed(evt);
            }
        });

        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.CENTER);
        underline.setAction(new underlineAction());
        underline.setRolloverEnabled(true);
        underline.setBackground(new java.awt.Color(250, 25, 61));
        underline.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        underline.setForeground(java.awt.Color.BLACK);
        underline.setText("U");
        underline.setToolTipText("underline your text");
        underline.setAlignmentY(0.0F);
        underline.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        underline.setIconTextGap(0);
        underline.setMargin(new java.awt.Insets(0, 0, 0, 0));
        underline.setPreferredSize(new java.awt.Dimension(13, 27));
        underline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                underlineActionPerformed(evt);
            }
        });

        ImageIcon im = null;
        Lalign.setAction(new StyledEditorKit.AlignmentAction("any", StyleConstants.ALIGN_LEFT)
        );
        Lalign.setBackground(new java.awt.Color(255, 51, 51));
        Lalign.setForeground(new java.awt.Color(255, 0, 51));
        Lalign.setIcon(new javax.swing.ImageIcon(getClass().getResource("/left align.JPG"))); // NOI18N
        Lalign.setText("");
        Lalign.setContentAreaFilled(false);
        Lalign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LalignActionPerformed(evt);
            }
        });

        Ralign.setAction(new StyledEditorKit.AlignmentAction("any", StyleConstants.ALIGN_RIGHT)
        );
        Ralign.setIcon(new javax.swing.ImageIcon(getClass().getResource("/right align.JPG"))); // NOI18N
        Ralign.setText("");
        Ralign.setContentAreaFilled(false);
        Ralign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RalignActionPerformed(evt);
            }
        });

        Calign.setAction(new StyledEditorKit.AlignmentAction("any", StyleConstants.ALIGN_CENTER)
        );
        Calign.setIcon(new javax.swing.ImageIcon(getClass().getResource("/centre.JPG"))); // NOI18N
        Calign.setText("");
        Calign.setContentAreaFilled(false);
        Calign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalignActionPerformed(evt);
            }
        });

        colorcombo.setBackground(new java.awt.Color(0, 0, 0));
        colorcombo.setForeground(new java.awt.Color(51, 51, 51));
        colorcombo.setMaximumRowCount(4);
        colorcombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorcomboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Number, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorcombo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(italic, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(underline, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Lalign, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Calign, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Ralign, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(italic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(underline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)
                        .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(Number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(colorcombo, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Lalign, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Calign, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ralign, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jLayeredPane1.setLayer(combo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Number, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(italic, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(underline, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Lalign, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Ralign, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Calign, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(colorcombo, javax.swing.JLayeredPane.DEFAULT_LAYER);

        textArea.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        textArea.getDocument().addUndoableEditListener(un);
        textArea.setMargin(new java.awt.Insets(20, 20, 20, 20));
        textArea.setPreferredSize(new java.awt.Dimension(10, 10));
        textArea.requestFocusInWindow();
        textArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                textAreaCaretUpdate(evt);
            }
        });
        jScrollPane3.setViewportView(textArea);

        JMenu.setText("File");

        NewFileMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        NewFileMenu.setMnemonic('n');
        NewFileMenu.setText("new");
        NewFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewFileMenuActionPerformed(evt);
            }
        });
        JMenu.add(NewFileMenu);

        OpenItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        OpenItem.setMnemonic('o');
        OpenItem.setText("Open");
        OpenItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenItemActionPerformed(evt);
            }
        });
        JMenu.add(OpenItem);

        SaveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveItem.setMnemonic('y');
        SaveItem.setText("save");
        SaveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveItemActionPerformed(evt);
            }
        });
        JMenu.add(SaveItem);

        saveas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveas.setText("Save As");
        saveas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveasActionPerformed(evt);
            }
        });
        JMenu.add(saveas);
        JMenu.add(jSeparator1);

        RecDoc.setText("Recent Document");
        JMenu.add(RecDoc);
        JMenu.add(jSeparator3);

        jMenuItem7.setText("exit");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        JMenu.add(jMenuItem7);

        jMenuBar1.add(JMenu);

        undomenu.setText("Edit");

        UndoMenu.setAction(new undo());
        UndoMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        UndoMenu.setText("undo");
        UndoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndoMenuActionPerformed(evt);
            }
        });
        undomenu.add(UndoMenu);

        redoMenue.setAction(new redoAction());
        redoMenue.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoMenue.setText("redo");
        redoMenue.setEnabled(false);
        redoMenue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoMenueActionPerformed(evt);
            }
        });
        undomenu.add(redoMenue);
        undomenu.add(jSeparator2);

        jMenuItem8.setAction(new StyledEditorKit.CopyAction());
        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem8.setText("copy");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, cutMenu, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), jMenuItem8, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        undomenu.add(jMenuItem8);

        cutMenu.setAction( new javax.swing.text.StyledEditorKit.CutAction());
        cutMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutMenu.setText("cut");
        cutMenu.setEnabled(false);
        cutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuActionPerformed(evt);
            }
        });
        undomenu.add(cutMenu);

        pastemenu.setAction(new StyledEditorKit.PasteAction());
        pastemenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pastemenu.setText("paste");
        try {
            String clip = (String)Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
            if(clip!=null){pastemenu.setEnabled(true);}
            else{
                pastemenu.setEnabled(false);
            }} catch (UnsupportedFlavorException ex) {
                pastemenu.setEnabled(false);
            } catch (IOException ex) {
                Logger.getLogger(textcomp.class.getName()).log(Level.SEVERE, null, ex);
            }
            pastemenu.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    pastemenuActionPerformed(evt);
                }
            });
            undomenu.add(pastemenu);
            undomenu.add(jSeparator4);

            FindMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
            FindMenu.setText("Find");
            FindMenu.setEnabled(false);
            FindMenu.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    FindMenuActionPerformed(evt);
                }
            });
            undomenu.add(FindMenu);

            jMenuBar1.add(undomenu);

            setJMenuBar(jMenuBar1);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                    .addContainerGap())
            );

            addBindings();

            bindingGroup.bind();

            pack();
        }// </editor-fold>//GEN-END:initComponents

    String Updatetitle (File f ){
String  SubS=null;
String Spath=null;
String  path= null;
try{      
 Spath=f.getAbsolutePath();

int e = Spath.lastIndexOf('\\')+1;
int s = Spath.lastIndexOf('.');
  path  =Spath.substring(e, s);}catch(NullPointerException e){}
if(file==null){
path="Untitled";
}
return path;
}
    
    
    
    ArrayList<File> files = new ArrayList<File>();
javax.swing.JMenuItem er;


    public void addDoc(File file){
 er = new javax.swing.JMenuItem();

 boolean exsist =false;
 er.addActionListener(new java.awt.event.ActionListener() {


     @Override
     public void actionPerformed(ActionEvent e) {
         try {
             DocActionPerform(e,file
             );
       
             
          
         
         } catch (IOException ex) {
             Logger.getLogger(textcomp.class.getName()).log(Level.SEVERE, null, ex);
         } catch (BadLocationException ex) {
             Logger.getLogger(textcomp.class.getName()).log(Level.SEVERE, null, ex);
         }
     }
 });
 
try{
 String path= file.getAbsolutePath();
}
catch(NullPointerException e){}

er.setText(Updatetitle(file));
int pos =0; 
    for(int i = 0;i<files.size();i++){
        
    if(file.equals(files.get(i))){
        exsist=true;
  pos = i;
    }
 
    }

    if(!exsist){

        files.add(file);
        RecDoc.add(er);
    } else{
     
     files.remove(pos);
     files.add(file);

     RecDoc.remove(pos);    
      RecDoc.add(er);
    
    } 
    
    
   
    int ce = RecDoc.getItemCount();

   
    if(ce==8){
RecDoc.remove(0);
files.remove(0);
    }    
  
}
 
    public static String getColorName(Color c) {
  
        for (Field f : Color.class.getFields()) {
        try {
            if (f.getType() == Color.class && f.get(null).equals(c)) {
                return f.getName();
            }
        }
        catch (java.lang.IllegalAccessException e) {
            // it should never get to here
        } 
    }
    return "unknown";
}
boolean edited = false;  
int editpos ;
 RTFEditorKit ek= new RTFEditorKit();   
 StyledEditorKit defaultkit = new StyledEditorKit();
 boolean cancelled;
    private void NewFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewFileMenuActionPerformed
if(file==null&&textArea.getDocument().getLength()==0){edited =false;}
        if(edited){

int pos =JOptionPane.showConfirmDialog(this, "do you want to save changes to "+Updatetitle(file), "M.H PAD",   JOptionPane.YES_NO_CANCEL_OPTION);
if(pos ==0 ){
  edited = false;
    SaveItemActionPerformed(evt);
  file = null;
  
  this.setTitle(Updatetitle(null));
  
  textArea.setText(null);
  editpos=0;  
textArea.setCaretPosition(0);
textArea.getDocument().addUndoableEditListener(un);

}
if(pos ==1){
    edited = false;
 editpos=0;
    textArea.setText(null);
    file = null;
this.setTitle(Updatetitle(null));
textArea.getDocument().addUndoableEditListener(un);
}

}
else{
            textArea.getDocument().addUndoableEditListener(ur);
edited = false;
            editpos=0;
            edited =false;

            textArea.setText(null);
file = null;
this.setTitle(Updatetitle(null));
        }

    }//GEN-LAST:event_NewFileMenuActionPerformed
 
    private void SaveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveItemActionPerformed

        String path ;


try{
if(file==null){
int rval = chooser.showSaveDialog(this);
if(rval==JFileChooser.APPROVE_OPTION){ 
    file = chooser.getSelectedFile();}

}

 
String ln = System.getProperty("line.separator");
String ext=null;

try{
    path = file.getAbsolutePath();
 ext= path.substring(path.lastIndexOf('.'));
}catch(StringIndexOutOfBoundsException ex){

    if(chooser.getFileFilter().getDescription().equals("RichTextFormat(.RTF)")){
  
    ext=".rtf";
    

}    if(chooser.getFileFilter().getDescription().equals("text Document(.txt)")){
  
    ext=".txt";

} if(chooser.getFileFilter().getDescription().equals("HTML Document(.html)")){
  
    ext=".html";

}
path = file.getAbsolutePath()+ext;
}

if(!file.exists()){
    try {
file = new File(path);    
        file.createNewFile();
     
    } catch (IOException ex) {
        Logger.getLogger(textcomp.class.getName()).log(Level.SEVERE, null, ex);
    }
}

Document dor=   textArea.getDocument();
try( BufferedWriter bufwrite = Files.newBufferedWriter(file.toPath(),TRUNCATE_EXISTING);){
String content = textArea.getDocument().getText(0, textArea.getDocument().getLength()).replace("\n", ln);
FileOutputStream fos = new FileOutputStream(path);    

    int pos = textArea.getCaretPosition();
     if(ext.equals(".rtf")){
      
      
       textArea.setContentType("text/rtf");
  textArea.setDocument(dor);
  textArea.setCaretPosition(pos);
  //textArea.getDocument().addUndoableEditListener(new undoable());

    
   textArea.getEditorKit().write(fos, textArea.getDocument(), 0, textArea.getDocument().getLength());
    }
    else {
textArea.setEditorKit(defaultkit);

textArea.setDocument(dor);
textArea.setCaretPosition(pos);

bufwrite.write(content);

     }


}   catch (IOException ex) {
        Logger.getLogger(textcomp.class.getName()).log(Level.SEVERE, null, ex);
    } catch (BadLocationException ex) {
        Logger.getLogger(textcomp.class.getName()).log(Level.SEVERE, null, ex);
    }
edited = false;

editpos  = textArea.getDocument().getLength();


this.setTitle(Updatetitle(file));

addDoc(file);
    }catch(NullPointerException e ){}
    }//GEN-LAST:event_SaveItemActionPerformed

    
    
    private void OpenItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenItemActionPerformed
System.out.println(SwingUtilities.isEventDispatchThread());
  
  try{
  
 int value = chooser.showOpenDialog(this);
 if(value==JFileChooser.APPROVE_OPTION){
 file= chooser.getSelectedFile();
 
 }
  String ext=null;
  String path=null;
  try{
  path = file.getAbsolutePath();
  ext = file.getPath().substring(path.indexOf('.'));
  
  }catch(NullPointerException e ){}
  catch(StringIndexOutOfBoundsException e){
  JOptionPane.showMessageDialog(this, "NO such file found ");
  }
  BufferedReader reader=null;
 try {
        reader = Files.newBufferedReader(file.toPath());
    
 } catch (IOException ex) {
     
    }catch(NullPointerException e ){}
 if(ext.equals(".txt")){
try{
   // textArea.setText(null);
textArea.setEditorKit(defaultkit);
   
    String read=reader.readLine();
StringBuilder text = new StringBuilder();
    int offset =0;
  //int test=0;

    while (read  !=null){
text.append(read);
text.append('\n');
read = reader.readLine();

        
    }
textArea.setText(text.toString());
textArea.getDocument().addUndoableEditListener(un);     
}catch(IOException e ){}
//catch(BadLocationException e ){}
 
 }
 else{
 
     try {
 FileInputStream fis = new FileInputStream(path);    
 
 
 if(ext.equals(".rtf")){

     
 textArea.setEditorKit(ek);
 textArea.getEditorKit().read(fis, textArea.getDocument(), 0);
textArea.getDocument().addUndoableEditListener(ur);
       
     }
  else{

     
 textArea.setEditorKit(defaultkit);
 textArea.getEditorKit().read(fis, textArea.getDocument(), 0);
     
       textArea.getDocument().addUndoableEditListener(ur);
     }
 
     
     } catch (IOException ex) {
         Logger.getLogger(textcomp.class.getName()).log(Level.SEVERE, null, ex);
     } catch (BadLocationException ex) {
         Logger.getLogger(textcomp.class.getName()).log(Level.SEVERE, null, ex);
     }
 
 
 
 }
  

edited = false;
editpos  = textArea.getDocument().getLength();
this.setTitle(Updatetitle(file)+" -untitled");
addDoc(file);
  }catch(NullPointerException e ){}
  
    }//GEN-LAST:event_OpenItemActionPerformed

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
 textArea.requestFocus() ; 
 
        Action number = new StyledEditorKit.FontFamilyAction("anything ", (String) combo.getSelectedItem()) ;
number.actionPerformed(evt);  
 
    }//GEN-LAST:event_comboActionPerformed

    private void comboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboItemStateChanged
  //if (evt.getStateChange() == ItemEvent.SELECTED) {
              //  textArea.setFont(new Font((String) combo.getSelectedItem(), Font.ITALIC, 16));            }        // TODO add your handling code here:
    }//GEN-LAST:event_comboItemStateChanged
MutableAttributeSet il;
    private void NumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumberActionPerformed
try{
    
  




Action number = new StyledEditorKit.FontSizeAction("anything ",(int) Number.getSelectedItem()) ;

number.actionPerformed(evt);  

Number.setFocusable(false);
//StyleConstants.setFontSize(il,(int) Number.getSelectedItem());

}      
// TODO add your handling code here:
catch(ClassCastException e ){}

    }//GEN-LAST:event_NumberActionPerformed
int num =1;

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
textArea.requestFocusInWindow();
System.out.println(Lalign.getIcon().getIconHeight());    
System.out.println(Lalign.getIcon().getIconWidth());

    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
textArea.requestFocus();                // TODO add your handling code here:
    }//GEN-LAST:event_formWindowGainedFocus

    private void textAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_textAreaCaretUpdate

        caretforeground();
if(editpos!=textArea.getDocument().getLength()){
  edited = true;}
if(textArea.getDocument().getLength()!=0){
FindMenu.setEnabled(true);
}else{FindMenu.setEnabled(false);}

if(!(un.canUndo())){
         //   jMenuItem6.setEnabled(false);}
}    if(!un.canRedo()){
            redoMenue.setEnabled(false);}
    else{   redoMenue.setEnabled(true);}
if(textArea.getCaret().getDot()!=textArea.getCaret().getMark()){cutMenu.setEnabled(true);}
else{cutMenu.setEnabled(false);}
    try {
String clip =(String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
 if(!clip.equals(null)){
            
            pastemenu.setEnabled(true);}
    } catch (UnsupportedFlavorException ex) {
        pastemenu.setEnabled(false);
    } catch (IOException ex) {
        
    }


    }//GEN-LAST:event_textAreaCaretUpdate

    private void italicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_italicActionPerformed
textArea.requestFocusInWindow();

    }//GEN-LAST:event_italicActionPerformed

    private void underlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_underlineActionPerformed


textArea.requestFocusInWindow();
    }//GEN-LAST:event_underlineActionPerformed

    private void redoMenueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoMenueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_redoMenueActionPerformed

    private void cutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cutMenuActionPerformed

    private void pastemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pastemenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pastemenuActionPerformed

    private void LalignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LalignActionPerformed
textArea.requestFocus();

    }//GEN-LAST:event_LalignActionPerformed

    private void RalignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RalignActionPerformed
      textArea.requestFocus();
        
    }//GEN-LAST:event_RalignActionPerformed

    private void CalignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalignActionPerformed
textArea.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_CalignActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
int opt = JOptionPane.showConfirmDialog(this, "Do you want to exit", "Confirm", JOptionPane.YES_NO_OPTION);
if(opt==0){        
System.exit(1);}
// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed
ArrayList<String> elements  = new ArrayList<String>(); ;
boolean NOT=true;
char d[];
ArrayList<Integer>  StartPosition  = new ArrayList<Integer>();
int u=0;    
int first ;
ArrayList<Integer> EndPosition  = new ArrayList<Integer>();
        String textfi ;
    String textfiB;
  int put=0;
  int loop;
String text="";
int f=-1;

    private void FindButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindButtonActionPerformed
int len = textArea.getDocument().getLength();
try{
FindDialog.setAlwaysOnTop(true);
        put+=1;
int startPos=0;
int endPos=0;

    if(caseMatch.isSelected()){
textfi = jTextField1.getText();

 
 text = textArea.getDocument().getText(0, textArea.getDocument().getLength());
 
 
 
}
    
else{
text = textArea.getDocument().getText(0, textArea.getDocument()
        .getLength()).toLowerCase();    

textfi = jTextField1.getText().toLowerCase();
}
    
if(put==1){
    
textfiB=textfi;
}

if(!textfi.equals(textfiB)){
textfiB=textfi;
NOT=true;
}


loop=0;
    if(NOT){
//f=-1;

    u=0;}
    StartPosition  = new ArrayList<Integer>();
     elements  = new ArrayList<String>();
    EndPosition  = new ArrayList<Integer>();
    
NOT=false;
first+=1;
 
 

 
 d = textArea.getDocument().getText(0, textArea.getDocument().getLength())
         .toCharArray();
 
 
 



 
if(MatchWord.isSelected()){
for(char pq:d){

endPos+=1;  
if(pq==' '){

    endPos-=1;  
StartPosition.add(startPos);
EndPosition.add(endPos);
    String t =text.substring(startPos, endPos);

endPos+=1;
startPos = endPos;  


    elements.add(t);
}}}
else{
    boolean found = false;
while(!found){    

    startPos=text.indexOf(textfi, endPos);
if(startPos==-1){
break;
}

    endPos=startPos+textfi.length();

String t = text.substring(startPos,endPos);


elements.add(t);
StartPosition.add(startPos);
EndPosition.add(endPos);




}
}

for(int i =0;i<elements.size();i++){
  
    if(textfi.equals(elements.get(i))){
loop+=1;
}}
    


  if(UpButton.isSelected()){


    for(int i= f;i<=elements.size();i++){

        if(f<elements.size()){

    f+=1;}
        if(f>=elements.size()){
if(u>0){
            i=0;
} 
f=0;
         u=0;
}

if(f>=0&&f<elements.size()){

    if(textfi.equals(elements.get(f))){
 u+=1;     

 
 textArea.setSelectionStart((int) StartPosition.get(f));
textArea.setSelectionEnd((int) EndPosition.get(f));
  
break;
    
    }}
    
    }
}

else{

    
for(int p= f;p>=0;p--){
    if(f<=elements.size()&&f>=0){

        f-=1;   

    }
   if(f==-1){
   
   f=elements.size()-1;
   }
    

    


if(f<=elements.size()&&f>=0){
    
    if(textfi.equals(elements.get(f))){
 
            u-=1;      

 textArea.setSelectionStart((int) StartPosition.get(f));
textArea.setSelectionEnd((int) EndPosition.get(f));


break; 

    }
    
    
}

}
  

  }

    
    
if(loop==0){
loop=0;
FindDialog.setAlwaysOnTop(false);
JOptionPane.showMessageDialog(this, "NO such word found ");
f=-1;    
}

if(loop==u& loop!=0){
FindDialog.setAlwaysOnTop(false);
    JOptionPane.showMessageDialog(this, "No more \"" +textfi + "\" word found ");
//NOT=true;

}}catch(BadLocationException e ){}

//FindDialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);



    }//GEN-LAST:event_FindButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

FindDialog.show(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void FindMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindMenuActionPerformed
FindDialog.setSize(412, 140);


FindDialog.setLocation(this.getWidth()/2 - FindDialog.getWidth()/2, this.getHeight()/2 - FindDialog.getHeight()/2);
FindDialog.show();
        // TODO add your handling code here:
    }//GEN-LAST:event_FindMenuActionPerformed

    private void FindDialogWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_FindDialogWindowClosed
int opt = JOptionPane.showConfirmDialog(this, "Do you want to exit", "Confirm", JOptionPane.YES_NO_OPTION);
if(opt==0){        
System.exit(1);}        // TODO add your handling code here:
    }//GEN-LAST:event_FindDialogWindowClosed

    private void FindDialogWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_FindDialogWindowGainedFocus

jTextField1.requestFocusInWindow();
// TODO add your handling code here:
    }//GEN-LAST:event_FindDialogWindowGainedFocus

    private void DownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DownButtonActionPerformed

    private void caseMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caseMatchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_caseMatchActionPerformed

    private void MatchWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MatchWordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MatchWordActionPerformed

    private void saveasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveasActionPerformed

        String path ;

       
int rval = chooser.showSaveDialog(this);
if(rval==JFileChooser.APPROVE_OPTION){ 
    file = chooser.getSelectedFile();}




 String ln = System.getProperty("line.separator");
String ext=null;

try{
    path = file.getAbsolutePath();
 ext= path.substring(path.lastIndexOf('.'));
}catch(StringIndexOutOfBoundsException ex){

    if(chooser.getFileFilter().getDescription().equals("RichTextFormat(.RTF)")){
  
    ext=".rtf";
    

}    if(chooser.getFileFilter().getDescription().equals("text Document(.txt)")){
  
    ext=".txt";

} if(chooser.getFileFilter().getDescription().equals("HTML Document(.html)")){
  
    ext=".html";

}
path = file.getAbsolutePath()+ext;
}


if(!file.exists()){
    try {
file = new File(path);    
        file.createNewFile();
       
    } catch (IOException ex) {
        Logger.getLogger(textcomp.class.getName()).log(Level.SEVERE, null, ex);
    }
}

 int pos = textArea.getCaretPosition();
Document dor=   textArea.getDocument();
try( BufferedWriter bufwrite = Files.newBufferedWriter(file.toPath(),TRUNCATE_EXISTING);){
String content = textArea.getDocument().getText(0, textArea.getDocument().getLength()).replace("\n", ln);
FileOutputStream fos = new FileOutputStream(path);    

 if(ext.equals(".rtf")){
      
      
       textArea.setContentType("text/rtf");
  textArea.setDocument(dor);
  textArea.setCaretPosition(pos);
//  textArea.getDocument().addUndoableEditListener(new undoable());

    
   textArea.getEditorKit().write(fos, textArea.getDocument(), 0, textArea.getDocument().getLength());
    }
    else {
textArea.setEditorKit(defaultkit);
textArea.setDocument(dor);
textArea.setCaretPosition(pos);
bufwrite.write(content);

     }


}   catch (IOException ex) {
        Logger.getLogger(textcomp.class.getName()).log(Level.SEVERE, null, ex);
    } catch (BadLocationException ex) {
        Logger.getLogger(textcomp.class.getName()).log(Level.SEVERE, null, ex);
    }
addDoc(file);
this.setTitle(Updatetitle(file));
editpos  = textArea.getDocument().getLength();
        edited= false;
                                                 // TODO add your handling code here:
    }//GEN-LAST:event_saveasActionPerformed

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
 
        
    }//GEN-LAST:event_formWindowDeactivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
if(file==null&&textArea.getDocument().getLength()==0){edited =false;}
        if(edited){

 int pos =JOptionPane.showConfirmDialog(this, "do you want to save changed to "+Updatetitle(file), "M.H PAD",   JOptionPane.YES_NO_CANCEL_OPTION);
if(pos ==0 ){
  save();
System.exit(0);
}
if(pos ==1){
System.exit(0);
}
}
        else{
System.exit(0);        
        }


    }//GEN-LAST:event_formWindowClosing

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_button1ActionPerformed

    private void colorcomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorcomboActionPerformed

Action ac = new StyledEditorKit.ForegroundAction("an", colorcombo.getForeground());
ac.actionPerformed(evt);
textArea.requestFocusInWindow();
    }//GEN-LAST:event_colorcomboActionPerformed

    private void UndoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UndoMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UndoMenuActionPerformed
int check = 0;
StyledDocument doc;
    
 public void DocActionPerform(java.awt.event.ActionEvent e , File file) throws IOException, BadLocationException{
this.file=file;
 String ext=null;
  String path=null;
  try{
  path = file.getAbsolutePath();
  ext = file.getPath().substring(path.indexOf('.'));
  
  }
  catch(NullPointerException er ){}
 
  BufferedReader reader=null;
 try {
        reader = Files.newBufferedReader(file.toPath());
    
 } catch (IOException ex) {
     
    }
 if(ext.equals(".txt")){
try{
   // textArea.setText(null);
textArea.setEditorKit(defaultkit);
    String read=reader.readLine();
StringBuilder text = new StringBuilder();
    int offset =0;
  //int test=0;
     while (read  !=null){
text.append(read);
text.append('\n');
read = reader.readLine();

        
    }
textArea.setText(text.toString());
     
}catch(IOException er ){}
//catch(BadLocationException e ){}
 
 }
 else{
 
     try {
 FileInputStream fis = new FileInputStream(path);    
 
 
 if(ext.equals(".rtf")){

    
 textArea.setEditorKit(ek);
 textArea.getEditorKit().read(fis, textArea.getDocument(), 0);
    
       
     }
  else{

     
 textArea.setEditorKit(defaultkit);
 textArea.getEditorKit().read(fis, textArea.getDocument(), 0);
     
       
     }
 
     
     } catch (IOException ex) {
         Logger.getLogger(textcomp.class.getName()).log(Level.SEVERE, null, ex);
     } catch (BadLocationException ex) {
         Logger.getLogger(textcomp.class.getName()).log(Level.SEVERE, null, ex);
     }
 
 
 
 }
this.setTitle(Updatetitle(file));
edited = false;
editpos  = textArea.getDocument().getLength();

addDoc(file);
    }
      

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException, InvocationTargetException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(textcomp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(textcomp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(textcomp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(textcomp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
   
   java.awt.EventQueue.invokeLater(new Runnable() {
        
       public void run() {
                new textcomp().setVisible(true);
      
            //   new textcomp().pack();
        }
       });
      
        
    }
      void addBindings(){
      InputMap i =textArea.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
      KeyStroke key = KeyStroke.getKeyStroke(KeyEvent.VK_B, Event.CTRL_MASK);
 i.put(key, new er());
   KeyStroke key2 = KeyStroke.getKeyStroke(KeyEvent.VK_I, Event.CTRL_MASK);
 i.put(key2, new italicAction());
  KeyStroke key3 = KeyStroke.getKeyStroke(KeyEvent.VK_U, Event.CTRL_MASK);
 i.put(key3, new underlineAction());
      } 

   

    
      class er extends AbstractAction{

     
        public void actionPerformed(ActionEvent e) {
     
     Action er = new javax.swing.text.StyledEditorKit.BoldAction();
 

  setForeground(jButton1);
     if(textArea.getDocument().getLength()==0 && jButton1.getForeground().equals(Color.RED)){
textArea.setFont(new Font( (String) combo.getSelectedItem(),  1,  (int) Number.getSelectedItem()));
 }else{
 er.actionPerformed(e);
 }}}
      class italicAction extends AbstractAction{

     
        public void actionPerformed(ActionEvent e) {
    
    
    
     Action er = new javax.swing.text.StyledEditorKit.ItalicAction();
 ItalicAction IT=  new  javax.swing.text.StyledEditorKit.ItalicAction();
 
 
 
 setForeground(italic);
     if(textArea.getDocument().getLength()==0 && italic.getForeground().equals(Color.RED)){
textArea.setFont(new Font( (String) combo.getSelectedItem(), 2,  (int) Number.getSelectedItem()));
 
   if(textArea.getDocument().getLength()==0 && italic.getForeground().equals(Color.RED)&&jButton1.getForeground().equals(Color.RED)){
textArea.setFont(new Font( (String) combo.getSelectedItem(), 3,  (int) Number.getSelectedItem()));
 }
     }

     else{
 er.actionPerformed(e);
 }
 }}
      
      class underlineAction extends AbstractAction{
  
        public void actionPerformed(ActionEvent e) {
     
     Action er = new javax.swing.text.StyledEditorKit.UnderlineAction();
textArea.requestFocusInWindow();
 setForeground(underline);
er.actionPerformed(e);
      }
      }

      class undo extends AbstractAction{


        @Override
       public void actionPerformed(ActionEvent e) {
            try {
                
                un.undo();
                

            } catch (CannotUndoException ex) {
               

                
            
            }
      
      }} class redoAction extends AbstractAction{

        @Override
        public void actionPerformed(ActionEvent e) {
try{
            un.redo();
}
catch(CannotRedoException ex){}   
    
       
        }
        }
      
  
      class undoable implements UndoableEditListener{
        @Override
        public void undoableEditHappened(UndoableEditEvent e) {
   
          
   un.addEdit(e.getEdit());



   if(un.canUndo()){
       UndoMenu.setEnabled(true);
   }
        }
      }

      
     void caretforeground() throws NullPointerException {
         int pos = textArea.getCaretPosition()-1;
    
         if(textArea.getCaret().getDot()!=textArea.getCaret().getMark()){
     pos+=1;   
        }
        
    
        
        if(textArea.getCaret().getDot()>textArea.getCaret().getMark()||textArea.getDocument().getLength()==0)
        {
            
            pos-=1; }
   try{
        sat =textArea.getStyledDocument().getCharacterElement(pos).getAttributes();
   }
   catch(NullPointerException e ){
   
   }
    try{
        
if( sat.getAttribute(StyleConstants.Italic).equals(true)){
            italic.setForeground(Color.red);
        }
        else{italic.setForeground(Color.BLACK);}
        }catch(NullPointerException e ){}
   
       try{
  
  
  for(int i =0;i<strings.length;i++){
  
      if(getColorName((Color) sat.getAttribute(StyleConstants.Foreground)).toLowerCase().equals(strings[i].toLowerCase())){

          colorcombo.setBackground(colors[i]);
colorcombo.setForeground(colors[i]);
 
  }else if(getColorName((Color) sat.getAttribute(StyleConstants.Foreground)).toLowerCase().equals("unknown")){
  colorcombo.setBackground(colors[0]);
  colorcombo.setForeground(colors[1]);
  }
      
  
  }
         if( sat.getAttribute(StyleConstants.Bold).equals(true)){
        
             jButton1.setForeground(Color.red);
       
         }
        else{jButton1.setForeground(Color.BLACK);}
       }catch(NullPointerException e ){}
       
        try{

if( sat.getAttribute(StyleConstants.Underline).equals(true)){
    
    underline.setForeground(Color.red);
        }
        else{
        underline.setForeground(Color.BLACK);
}



   
 
}
       catch(NullPointerException ex){}
if(textArea.getCaret().getDot()==textArea.getCaret().getMark()){
    
    Number.setSelectedItem(StyleConstants.getFontSize(sat));
combo.setSelectedItem(StyleConstants.getFontFamily(sat));
 }
    }

      void setForeground(JButton jb){
  boolean black = false;
  boolean red = false;
          if(jb.getForeground().equals(Color.BLACK)){
   black=true;
          }
   if(jb.getForeground().equals(Color.red)){
   red=true;
   }
   if(black){jb.setForeground(Color.red);}
      if(red){jb.setForeground(Color.BLACK);}
      }
     
      void save (){
      String path ;


try{
if(file==null){
int rval = chooser.showSaveDialog(this);
if(rval==JFileChooser.APPROVE_OPTION){ 
    file = chooser.getSelectedFile();}

}

 
String ln = System.getProperty("line.separator");
String ext=null;

try{
    path = file.getAbsolutePath();
 ext= path.substring(path.lastIndexOf('.'));
}catch(StringIndexOutOfBoundsException ex){

    if(chooser.getFileFilter().getDescription().equals("RichTextFormat(.RTF)")){
  
    ext=".rtf";
    

}    if(chooser.getFileFilter().getDescription().equals("text Document(.txt)")){
  
    ext=".txt";

} if(chooser.getFileFilter().getDescription().equals("HTML Document(.html)")){
  
    ext=".html";

}
path = file.getAbsolutePath()+ext;
}

if(!file.exists()){
    try {
file = new File(path);    
        file.createNewFile();
       
    } catch (IOException ex) {
        Logger.getLogger(textcomp.class.getName()).log(Level.SEVERE, null, ex);
    }
}

Document dor=   textArea.getDocument();
try( BufferedWriter bufwrite = Files.newBufferedWriter(file.toPath(),TRUNCATE_EXISTING);){
String content = textArea.getDocument().getText(0, textArea.getDocument().getLength()).replace("\n", ln);
FileOutputStream fos = new FileOutputStream(path);    

    int pos = textArea.getCaretPosition();
     if(ext.equals(".rtf")){
      
      
       textArea.setContentType("text/rtf");
  textArea.setDocument(dor);
  textArea.setCaretPosition(pos);
  textArea.getDocument().addUndoableEditListener(new undoable());

    
   textArea.getEditorKit().write(fos, textArea.getDocument(), 0, textArea.getDocument().getLength());
    }
    else {
textArea.setEditorKit(defaultkit);
textArea.setDocument(dor);
textArea.setCaretPosition(pos);
bufwrite.write(content);

     }


}   catch (IOException ex) {
        Logger.getLogger(textcomp.class.getName()).log(Level.SEVERE, null, ex);
    } catch (BadLocationException ex) {
        Logger.getLogger(textcomp.class.getName()).log(Level.SEVERE, null, ex);
    }
edited = false;
editpos  = textArea.getDocument().getLength();

this.setTitle(Updatetitle(file));

addDoc(file);
    }catch(NullPointerException e ){}
      
      }
      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Calign;
    private javax.swing.JRadioButton DownButton;
    private javax.swing.JButton FindButton;
    private javax.swing.JDialog FindDialog;
    private javax.swing.JMenuItem FindMenu;
    private javax.swing.JMenu JMenu;
    private javax.swing.JButton Lalign;
    private javax.swing.JCheckBox MatchWord;
    private javax.swing.JMenuItem NewFileMenu;
    private javax.swing.JComboBox Number;
    private javax.swing.JMenuItem OpenItem;
    private javax.swing.JButton Ralign;
    private javax.swing.JMenu RecDoc;
    private javax.swing.JMenuItem SaveItem;
    private javax.swing.JMenuItem UndoMenu;
    private javax.swing.JRadioButton UpButton;
    private java.awt.Button button1;
    private java.awt.Button button2;
    private java.awt.Button button3;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox caseMatch;
    private javax.swing.JComboBox colorcombo;
    private javax.swing.JDialog colordialog;
    private javax.swing.JComboBox combo;
    private javax.swing.JMenuItem cutMenu;
    private javax.swing.JButton italic;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JMenuItem pastemenu;
    private javax.swing.JMenuItem redoMenue;
    private javax.swing.JMenuItem saveas;
    private javax.swing.JTextPane textArea;
    private javax.swing.JButton underline;
    private javax.swing.JMenu undomenu;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables


}
